openapi: 3.0.0
info:
  title: AERIUS Connect API
  description: >
    ## HTTP REST (Swagger)

    Berekeningen met AERIUS Calculator kunnen worden uitgevoerd met een webservice.

    Deze webservice gaat uit van het HTTP REST protocol.

    Het formaat voor de gegevensuitwisseling is JSON.

    De verschillende API functies worden hieronder nader toegelicht.


    ## API-key

    Een API-key is een code die wordt gebruikt om gebruikers die onze API aanroepen te identificeren.

    Voor potentiële langdraaiende API functies, denk aan het doorrekenen en het genereren van een bijlage, is dit verplicht.

    De API-key kan aangevraagd worden d.m.v. de [generateAPIKey](#!/user/postGenerateAPIKey) functie en is gekoppeld aan uw e-mailadres.
  contact:
    name: AERIUS
    url: https://www.aerius.nl
    email: pasbureau@bij12.nl
  version: '4'
servers:
- url: http://{defaultHost}
  variables:
    defaultHost:
      default: www.example.com/api/4
paths:
  /calculate:
    post:
      tags:
      - calculation
      summary: postCalculate
      description: >
        Deze functie voert een AERIUS berekening uit en stuurt het resultaat via het e-mailadres gekoppeld aan de opgegeven API-key terug.


        Het veld __dataObjects__ bevat een lijst van 1 of meerdere bronbestanden die samen de invoer van de berekening vormen.


        Als de invoer niet gevalideerd kon worden dan wordt dit op dezelfde manier teruggegeven als bij de validatie functie.

        Als het resultaat aangeeft dat het succesvol was, dan is de rekenopdracht aangeboden aan AERIUS Calculator.

        Wanneer de rekenopdracht is afgerond, ontvangt de gebruiker een e-mail.

        De e-mail bevat een downloadlink die gebruikt kan worden om de rekenresultaten te downloaden.
      operationId: PostCalculate
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalculateRequest'
        required: true
      responses:
        200:
          description: >
            Bij een normale afhandeling van de API functie.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateResponse'
        400:
          description: >
            Bij gebruikersfout(en) - denk aan missende optioneel verplichte velden enz.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: >
            Bij een systeemfout. Neem a.u.b. contact op met de AERIUS helpdesk als dit aanhoudt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /report:
    post:
      tags:
      - calculation
      summary: postReport
      description: >
        Deze functie voert een AERIUS berekening uit, maakt een bijlage document en stuurt dit document via het e-mailadres gekoppeld aan de opgegeven API-key terug.


        Er zijn 2 opties.

        De eerste is met 1 situatie met invoer bronnen en de tweede is met 2 situaties met invoer bronnen.

        Bij de tweede optie wordt een vergelijkingsbijlage document gemaakt, waarin het verschil tussen de beide situaties wordt weergeven.

        Als de rekenoptie __NBWET__ wordt gebruikt wordt een ___Bijlage AERIUS berekening voor vergunningaanvraag___ aangemaakt.

        Daarin wordt de metadata van de eerste GML van de bronnen set gebruikt die als _voorgestelde_ of _toekomstige situatie_ is aangemerkt.

        Volgende metadata velden (IMAER) zijn dan verplicht: projectName; corporation; reference; description; streetAddress; postcode; city.


        Bij alle andere rekenopties wordt een ___AERIUS berekening voor eigen gebruik___ aangemaakt.

        De metadata is dan niet verplicht, maar als er metadata in de eerste GML van de bronnen set die als _voorgestelde_ of _toekomstige situatie_ is aangemerkt aanwezig is wordt deze wel gebruikt.


        Het veld __reportDataObjects__ bevat een lijst van 1 of meerdere bronbestanden die samen de invoer van de berekening vormen.


        Als de invoer niet gevalideerd kon worden dan wordt dit op dezelfde manier teruggegeven als bij de validatie functie.

        Als het resultaat aangeeft dat het succesvol was, dan is de rekenopdracht aangeboden aan AERIUS Calculator.

        Wanneer het document is aangemaakt, ontvangt de gebruiker een e-mail.

        De e-mail bevat een downloadlink die gebruikt kan worden om het document te downloaden.
      operationId: PostReport
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportRequest'
        required: true
      responses:
        200:
          description: >
            Bij een normale afhandeling van de API functie.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateResponse'
        400:
          description: >
            Bij gebruikersfout(en) - denk aan missende optioneel verplichte velden enz.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: >
            Bij een systeemfout. Neem a.u.b. contact op met de AERIUS helpdesk als dit aanhoudt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /export/priorityProjectUtilisation:
    post:
      tags:
      - register
      summary: postExportProject
      description: >
        Deze functie start een export waar (voor een prioritair project) de reservering, de benutting per toegekend deelproject en de gesommeerde benutting van de toegekende deelprojecten gemaakt wordt.

        En stuurt deze export terug via het e-mailadres gekoppeld aan de opgegeven API-key terug.
      operationId: PostExportProject
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriorityProjectUtilisationRequest'
        required: true
      responses:
        200:
          description: >
            Bij een normale afhandeling van de API functie.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateResponse'
        400:
          description: >
            Bij gebruikersfout(en) - denk aan missende optioneel verplichte velden enz.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: >
            Bij een systeemfout. Neem a.u.b. contact op met de AERIUS helpdesk als dit aanhoudt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /validate:
    post:
      tags:
      - util
      summary: postValidate
      description: >
        Deze functie controleert op correctheid van de IMAER GML bestanden tegen het IMAER schema. Alleen GML bestanden of een GML export ingepakt als ZIP worden hier ondersteund.

        De validator controleert ook op valide domein waarden van sector categorieën en of bepaalde waarden binnen de toegestane grenswaarden vallen.


        Het veld __substance__ is alleen relevant voor OPS input bestanden.


        De validator geeft via een veld __successful__ de status terug of de validate geslaagd is.

        Indien de validatie niet geslaagd is wordt een lijst met fouten terug gegeven in het veld __errors__.


        Waarschuwingen kunnen ook aanwezig zijn als de validatie succesvol was.
      operationId: PostValidate
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateRequest'
        required: true
      responses:
        200:
          description: >
            Bij een normale afhandeling van de API functie.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateResponse'
        400:
          description: >
            Bij gebruikersfout(en) - denk aan missende optioneel verplichte velden enz.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: >
            Bij een systeemfout. Neem a.u.b. contact op met de AERIUS helpdesk als dit aanhoudt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /convert:
    post:
      tags:
      - util
      summary: postConvert
      description: >
        Deze functie converteert GML bestanden (oudere versie IMAER) naar de laatste versie van de IMAER.

        Het te converteren bestand wordt eerst gevalideerd, zoals de validator dat doet.

        Als dit geen problemen oplevert wordt het bestand omgezet naar een GML van de laatste versie van IMAER.


        Het veld __substance__ is alleen relevant voor OPS input bestanden.


        De functie geeft via een veld __successful__ de status terug of de conversie geslaagd is.

        Indien de conversie niet geslaagd is wordt een lijst met fouten teruggegeven in het veld __errors__.

        Als de conversie wel geslaagd is wordt het geconverteerde bestand en metadata ervan in het veld __dataObject__ teruggegeven.


        Waarschuwingen kunnen ook aanwezig zijn als de conversie succesvol was.
      operationId: PostConvert
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConvertRequest'
        required: true
      responses:
        200:
          description: >
            Bij een normale afhandeling van de API functie.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConvertResponse'
        400:
          description: >
            Bij gebruikersfout(en) - denk aan missende optioneel verplichte velden enz.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: >
            Bij een systeemfout. Neem a.u.b. contact op met de AERIUS helpdesk als dit aanhoudt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /valuePerHexagon/highest:
    post:
      tags:
      - util
      summary: postHighestValuePerHexagon
      description: "De functie maakt op basis van meerdere invoer resultaatbestanden een nieuw resultaat bestand aan door van elk gevonden resultaatpunt de hoogste waarde te nemen.\nDus telt niet resultaten op in uitvoerbestand, maar bepaalt hoogste waarde en neemt bijbehorende resultaten over.\nDe hoogste waarde wordt bepaald door NOx en NH3 bij elkaar op te tellen. Zie beneden voor voorbeelden.\n\n__Let op:__ Dit werkt alleen voor NOx/NH3 deposities. Andere stoffen/resultaten zullen niet meegenomen worden.\n\nDe functie geeft via een veld __successful__ de status terug of de samenvoeging geslaagd is.\nIndien de samenvoeging niet geslaagd is wordt een lijst met fouten teruggegeven in het veld __errors__.\nAls de samenvoeging wel geslaagd is wordt het samengevoegde bestand en metadata ervan in het veld __dataObject__ teruggegeven.\n\n### Voorbeeld\n\n#### Invoer\n                \n| Bestand | ReceptorId | Stof | Waarde |\n|---------|------------|------|--------|\n| 1       | 1          | NOx  | 5      |\n| 1       | 1          | NH3  | 3      |\n| 1       | 2          | NOx  | 5      |\n| 1       | 2          | NO2  | 1      |\n| 2       | 1          | NOx  | 6      |\n| 2       | 1          | NH3  | 1      |\n| 2       | 2          | NOx  | 6      |\n\n#### Resultaat\n\n| ReceptorId | Stof | Waarde | Reden van opnemen |\n|------------|------|--------|-------------------|\n| 1          | NOx  | 5      | Stoffen opgeteld voor ReceptorId 1: Bestand 1 -> 5 (NOx) + 3 (NH3) = 8. Bestand 2 -> 6 (NOx) + 1 (NH3) = 7. Bestand 1 heeft een hoger 'hoogste waarde' voor deze receptor, deze wordt 1 op 1 overgenomen. |\n| 1          | NH3  | 3      | Zelfde als hierboven. |\n| 2          | NOx  | 6      | Stoffen opgeteld voor ReceptorId 2: Bestand 1 -> 5 (NOx) + 0 (NH3) = 5. Bestand 2 -> 6 (NOx) + 0 (NH3) = 6. Bestand 2 heeft een hoger 'hoogste waarde' voor deze receptor, deze wordt 1 op 1 overgenomen. |\n\nIn een van de invoerbestanden is ook een NO2 waarde aanwezig, zoals in de resultaattabel te zien is staat deze er uiteindelijk niet in\n en wordt het niet gebruikt om te bepalen welke resultaten gebruikt gaan worden.\n"
      operationId: PostHighestValuePerHexagon
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HighestValuePerHexagonRequest'
        required: true
      responses:
        200:
          description: >
            Bij een normale afhandeling van de API functie.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConvertResponse'
        400:
          description: >
            Bij gebruikersfout(en) - denk aan missende optioneel verplichte velden enz.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: >
            Bij een systeemfout. Neem a.u.b. contact op met de AERIUS helpdesk als dit aanhoudt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /valuePerHexagon/total:
    post:
      tags:
      - util
      summary: postTotalValuePerHexagon
      description: "De functie maakt op basis van meerdere invoer resultaatbestanden een nieuw resultaat bestand aan door van elk gevonden resultaatpunt de waarden op te tellen.\nZie beneden voor voorbeelden.\n\n__Let op:__ Dit werkt alleen voor NOx/NH3 deposities. Andere stoffen/resultaten zullen niet meegenomen worden.\n\nDe functie geeft via een veld __successful__ de status terug of de samenvoeging geslaagd is.\nIndien de samenvoeging niet geslaagd is wordt een lijst met fouten teruggegeven in het veld __errors__.\nAls de samenvoeging wel geslaagd is wordt het samengevoegde bestand en metadata ervan in het veld __dataObject__ teruggegeven.\n\n### Voorbeeld\n\n#### Invoer\n                \n| Bestand | ReceptorId | Stof | Waarde |\n|---------|------------|------|--------|\n| 1       | 1          | NOx  | 5      |\n| 1       | 1          | NH3  | 3      |\n| 1       | 2          | NOx  | 5      |\n| 1       | 2          | NO2  | 1      |\n| 2       | 1          | NOx  | 6      |\n| 2       | 1          | NH3  | 1      |\n| 2       | 2          | NOx  | 6      |\n\n#### Resultaat\n\n| ReceptorId | Stof | Waarde | Berekening        |\n|------------|------|--------|-------------------|\n| 1          | NOx  | 11     | NOx voor ReceptorId 1: 5 (Bestand 1) + 6 (Bestand 2) = 11. |\n| 1          | NH3  | 4      | NH3 voor ReceptorId 1: 3 (Bestand 1) + 1 (Bestand 2) = 4.  |\n| 2          | NOx  | 6      | NOx voor ReceptorId 2: 5 (Bestand 1) + 6 (Bestand 2) = 11. |\n\nIn een van de invoerbestanden is ook een NO2 waarde aanwezig, zoals in de resultaattabel te zien is staat deze er uiteindelijk niet in\n en wordt het niet gebruikt om te bepalen welke resultaten gebruikt gaan worden.\n"
      operationId: PostTotalValuePerHexagon
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TotalValuePerHexagonRequest'
        required: true
      responses:
        200:
          description: >
            Bij een normale afhandeling van de API functie.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConvertResponse'
        400:
          description: >
            Bij gebruikersfout(en) - denk aan missende optioneel verplichte velden enz.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: >
            Bij een systeemfout. Neem a.u.b. contact op met de AERIUS helpdesk als dit aanhoudt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /valuePerHexagon/delta:
    post:
      tags:
      - util
      summary: postDeltaValuePerHexagon
      description: "De functie maakt op basis van twee invoer resultaatbestanden een nieuw resultaat bestand aan door van elk gevonden resultaatpunt de waarde in __current_ van __proposed__ af te trekken.\nOm delta waarden die onder de 0 zijn te behouden kan __onlyIncreasement__ op false gezet worden. Standaard staat deze aan en zullen deze waarden op 0 gezet worden.        \nZie beneden voor voorbeelden.\n\n__Let op:__ Dit werkt alleen voor NOx/NH3 deposities. Andere stoffen/resultaten zullen niet meegenomen worden.\n\nDe functie geeft via een veld __successful__ de status terug of de samenvoeging geslaagd is.\nIndien de samenvoeging niet geslaagd is wordt een lijst met fouten teruggegeven in het veld __errors__.\nAls de samenvoeging wel geslaagd is wordt het samengevoegde bestand en metadata ervan in het veld __dataObject__ teruggegeven.\n\n### Voorbeeld\n\n#### Invoer\n                \n| Bestand | ReceptorId | Stof | Waarde |\n|---------|------------|------|--------|\n| 1       | 1          | NOx  | 4      |\n| 1       | 1          | NH3  | 3      |\n| 1       | 2          | NOx  | 5      |\n| 2       | 1          | NOx  | 6      |\n| 2       | 1          | NH3  | 1      |\n| 2       | 2          | NOx  | 2      |\n| 2       | 2          | NO2  | 1      |\n\n#### Resultaat\n\n| ReceptorId | Stof | Waarde | Berekening                                                                                      |\n|------------|------|--------|-------------------------------------------------------------------------------------------------|\n| 1          | NOx  | 2      | NOx voor ReceptorId 1: 6 (Bestand 2) - 4 (Bestand 1) = 2.                                       |\n| 1          | NH3  | 0 / -2 | NH3 voor ReceptorId 1: 1 (Bestand 2) - 3 (Bestand 1) = 0 mits onlyIncreasement true, anders -2. |\n| 2          | NOx  | 0 / -3 | NOx voor ReceptorId 2: 2 (Bestand 2) - 5 (Bestand 1) = 0 mits onlyIncreasement true, anders -3. |\n\nIn een van de invoerbestanden is ook een NO2 waarde aanwezig, zoals in de resultaattabel te zien is staat deze er uiteindelijk niet in\n en wordt het niet gebruikt om te bepalen welke resultaten gebruikt gaan worden.\n"
      operationId: PostDeltaValuePerHexagon
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeltaValuePerHexagonRequest'
        required: true
      responses:
        200:
          description: >
            Bij een normale afhandeling van de API functie.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConvertResponse'
        400:
          description: >
            Bij gebruikersfout(en) - denk aan missende optioneel verplichte velden enz.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: >
            Bij een systeemfout. Neem a.u.b. contact op met de AERIUS helpdesk als dit aanhoudt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /status/jobs:
    get:
      tags:
      - user
      summary: getStatusJobs
      description: >
        Deze functie geeft een statusoverzicht van de uitgevoerde taken die, voor een opgegeven API-key, zijn aangemeld, worden uitgevoerd of zijn afgerond.
      operationId: GetStatusJobs
      parameters:
      - name: apiKey
        in: query
        description: De API-key die is gebruikt bij andere Connect opdrachten.
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        200:
          description: >
            Bij een normale afhandeling van de API functie.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusJobResponse'
        400:
          description: >
            Bij gebruikersfout(en) - denk aan missende optioneel verplichte velden enz.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: >
            Bij een systeemfout. Neem a.u.b. contact op met de AERIUS helpdesk als dit aanhoudt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /generateAPIKey:
    post:
      tags:
      - user
      summary: postGenerateAPIKey
      description: >
        Deze functie genereert een API-key. De API-key wordt gemaild naar het opgegeven e-mailadres.

        Deze functie kan ook gebruikt worden om de API-key te resetten. Uw eerdere API-key is dan niet meer geldig.


        De functie geeft via een veld __successful__ de status terug of het aanvragen geslaagd is.
      operationId: PostGenerateAPIKey
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateAPIKeyRequest'
        required: true
      responses:
        200:
          description: >
            Bij een normale afhandeling van de API functie.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateResponse'
        400:
          description: >
            Bij gebruikersfout(en) - denk aan missende optioneel verplichte velden enz.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: >
            Bij een systeemfout. Neem a.u.b. contact op met de AERIUS helpdesk als dit aanhoudt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    ErrorResponse:
      title: ErrorResponse
      required:
      - code
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Substance:
      title: Substance
      enum:
      - NOX
      - NH3
      type: string
      description: Toegestane stoffen.
      example: NOX
    ContentType:
      title: ContentType
      enum:
      - TEXT
      - BASE64
      type: string
      description: >-
        De codering van het data object.

        Ondersteunde waarden zijn:

        ___TEXT:___ de data is textueel.

        ___BASE64:___ de data is base64 gecodeerd. ZIP en PDF bestanden zullen altijd base64 gecodeerd moeten zijn, terwijl een GML ook als text kan worden meegegeven.
      example: TEXT
    SituationType:
      title: SituationType
      enum:
      - CURRENT
      - PROPOSED
      type: string
      description: Geeft aan of het om een _huidige situatie_ (___CURRENT___) gaat of om een _voorgestelde_ of _nieuwe situatie_ (___PROPOSED___).
      example: CURRENT
    DataType:
      title: DataType
      enum:
      - BRN
      - CSV
      - GML
      - PDF
      - ZIP
      type: string
      description: >-
        Het type van de invoer.

        Ondersteunde waarden zijn:

        ___GML:___ AERIUS IMAER GML.

        ___PDF:___ AERIUS bijlage document.

        ___ZIP:___ ZIP bestand met als inhoud één AERIUS IMAER GML bestand.

        __Let op:__ De bestandtypen ___BRN___ en ___CSV___ worden officieel niet ondersteund.
      example: BRN
    DataObject:
      title: DataObject
      required:
      - contentType
      - dataType
      - data
      - non-existent
      type: object
      properties:
        contentType:
          $ref: '#/components/schemas/ContentType'
        dataType:
          $ref: '#/components/schemas/DataType'
        data:
          type: string
          description: >-
            Het bestand dat verwerkt moet worden of het resultaat hiervan.

            Dit is een text of base64 representatie van één van de ondersteunde content typen.

            Mits resultaat, is het bestand van het data- en content type zoals in andere velden aangegeven.
        non-existent:
          type: string
      discriminator:
        propertyName: non-existent
    CalculateDataObject:
      title: CalculateDataObject
      allOf:
      - $ref: '#/components/schemas/DataObject'
      - type: object
        properties:
          researchArea:
            type: boolean
            description: >-
              Indien een onderzoeksgebied berekening wordt gedaan, wordt via dit veld aangegeven dat dit databestand gebruikt moet worden voor het bepalen van het onderzoeksgebied of om de emissie effecten te berekenen.

              Indien true wordt dit databestand gebruikt om het onderzoeksgebied te bepalen.

              Indien false of weggelaten dan wordt dit databestand meegenomen in de berekening van het emissie effect.
            example: false
    ReportDataObject:
      title: ReportDataObject
      allOf:
      - $ref: '#/components/schemas/DataObject'
      - required:
        - situationType
        type: object
        properties:
          situationType:
            $ref: '#/components/schemas/SituationType'
    ValidationMessage:
      title: ValidationMessage
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: integer
          description: Validatie code.
          format: int32
        message:
          type: string
          description: Validatie text.
    JobType:
      title: JobType
      enum:
      - CALCULATION
      - REPORT
      - PRIORITY_PROJECT_UTILISATION
      type: string
      description: >-
        Het type job.


        ___CALCULATION___: Gestartte berekeningen met als uitvoer een resultaatbestand (GML).

        ___REPORT___: Gestartte berekeningen met als uitvoer een bijlage document (PDF).

        ___PRIORITY_PROJECT_UTILISATION___: Gestartte (prioritair project) benuttingsexport (ZIP).
      example: CALCULATION
    JobState:
      title: JobState
      enum:
      - QUEUED
      - RUNNING
      - COMPLETED
      type: string
      description: >-
        De status van de job.


        ___QUEUED:___ De opdracht is ontvangen en staat in de wachtrij.

        ___RUNNING:___ De opdracht wordt op dit moment uitgevoerd.

        ___COMPLETED:___ De opdracht is afgerond.
      example: QUEUED
    StatusJobProgress:
      title: StatusJobProgress
      type: object
      properties:
        jobId:
          type: integer
          description: De id van de job.
          format: int32
        type:
          $ref: '#/components/schemas/JobType'
        state:
          $ref: '#/components/schemas/JobState'
        name:
          type: string
          description: Optioneel de door gebruiker opgegeven naam voor job.
        key:
          type: string
          description: Bevat de unieke job key.
        hectareCalculated:
          type: integer
          description: Aantal hectare berekend tot nu toe.
          format: int64
        startDateTime:
          type: string
          description: Startdatum en tijd.
          format: date-time
        endDateTime:
          type: string
          description: Einddatum en tijd.
          format: date-time
        resultUrl:
          type: string
          description: >-
            URL waar resultaat van de afgeronde job kan worden opgehaald.

            Let wel op. Het resultaat is tot uiterlijk 3 dagen na afronding op te halen.
    StatusJobResponse:
      title: StatusJobResponse
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/StatusJobProgress'
          description: ''
    ValidateResponse:
      title: ValidateResponse
      required:
      - non-existent
      type: object
      properties:
        successful:
          type: boolean
          description: true indien operatie zonder fouten is gestart (bij potentieel langdurige API functies) of afgerond (bij API functies die direct resultaat retourneren).
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationMessage'
          description: ''
        warnings:
          type: array
          items:
            $ref: '#/components/schemas/ValidationMessage'
          description: ''
        non-existent:
          type: string
      discriminator:
        propertyName: non-existent
    ConvertResponse:
      title: ConvertResponse
      allOf:
      - $ref: '#/components/schemas/ValidateResponse'
      - required:
        - non-existent
        type: object
        properties:
          dataObject:
            $ref: '#/components/schemas/DataObject'
          non-existent:
            type: string
        discriminator:
          propertyName: non-existent
    CalculationOptions:
      title: CalculationOptions
      required:
      - calculationType
      - year
      - substances
      type: object
      properties:
        calculationType:
          $ref: '#/components/schemas/CalculationType'
        year:
          type: integer
          description: >-
            Het rekenjaar waarvoor gerekend moet worden.

            Dit wordt gebruikt om specifieke emissiewaarden bij dat jaar te bepalen.

            Hoewel het rekenjaar ook in de meta data van de GML kan worden opgegeven, moet het rekenjaar via deze optie worden opgegeven en wordt een rekenjaar in de GML niet meegenomen.
          format: int32
        substances:
          type: array
          items:
            $ref: '#/components/schemas/Substance'
          description: >-
            De lijst met emitterende stoffen waarvoor gerekend moet worden.

            De ondersteunde stoffen zijn: ___NH3___, ___NOX___.

            Bij NOx wordt automatisch ook NO2 meeberekend, indien er voor de bron NO2 waarden zijn.
        name:
          type: string
          description: >-
            Optioneel een naam om aan de job mee te geven.

            Deze wordt in het statusoverzicht teruggegeven om zo jobs makkelijker te kunnen identificeren.
        aggregate:
          type: boolean
          description: >-
            Enkele sectoren worden standaard niet geaggregeerd tijdens een berekening.

            Met deze optie kan je de aggregatie voor deze sectoren aanzetten.

            Deze optie wordt alleen gebruikt bij de rekenoptie __CUSTOM_POINTS__.
        range:
          type: integer
          description: >-
            Geeft de straal van de bronnen in meters tot waar gerekend moet worden.

            Deze optie is verplicht voor de rekenopties: ___NATURE_AREA___ en ___RADIUS___.

            Voor de andere opties heeft dit veld geen effect.
          format: int32
        tempProjectYears:
          type: integer
          description: >-
            Indien meegegeven wordt de berekening als een tijdelijk project gedaan.

            Het veld geeft het aantal jaren van het tijdelijke project aan.
          format: int32
        permitCalculationRadiusType:
          $ref: '#/components/schemas/PermitCalculationRadiusType'
        researchArea:
          type: boolean
          description: >-
            Deze optie is alleen bruikbaar mits het om een rekenopdracht ( [calculate](#!/calculation/postCalculate) ) gaat. Bij een PDF heeft dit geen effect.

            Als true dan wordt de berekening gedaan op een onderzoeksgebied.

            Het onderzoeksgebied wordt bepaald door die databestanden waarbij in de opties researchArea op true is gezet.

            Zie ook de modelbeschrijving voor ___CalculateDataObject___.

            Bij een onderzoeksgebiedberekening moet tenminste 1 databestand zijn aangemerkt als onderzoeksgebied en tenminste 1 die het databestand aangeeft dat moet gebruikt worden om de emissie effecten te berekenen.

            De bronnen in het databestand dat is aangemerkt als onderzoeksgebied moeten ook in het databestand worden geplaatst om de emissie effecten te berekenen.
        permitReportType:
          $ref: '#/components/schemas/PermitReportType'
        outputOptions:
          $ref: '#/components/schemas/CalculationOutputOptions'
      description: De rekenopties waarmee gerekend moet worden.
    CalculationOutputOptions:
      title: CalculationOutputOptions
      type: object
      properties:
        sectorOutput:
          type: boolean
          description: >-
            Deze optie is alleen bruikbaar mits het om een rekenopdracht ( [calculate](#!/calculation/postCalculate) ) gaat. Bij een PDF heeft dit geen effect.

            Als true dan worden ook de resultaten in de GML per sector meegestuurd.

            Voor de andere opties heeft dit veld geen effect.
          example: false
      description: The expected output
    ValidateRequest:
      title: ValidateRequest
      required:
      - dataObject
      type: object
      properties:
        dataObject:
          $ref: '#/components/schemas/DataObject'
        strict:
          type: boolean
          description: Mits true wordt een strikte validatie gedaan. Bij een strikte validatie worden warnings ook als errors gezien.
          example: false
        substance:
          $ref: '#/components/schemas/Substance'
    ConvertRequest:
      title: ConvertRequest
      required:
      - dataObject
      type: object
      properties:
        dataObject:
          $ref: '#/components/schemas/DataObject'
        substance:
          $ref: '#/components/schemas/Substance'
    CalculateRequest:
      title: CalculateRequest
      required:
      - apiKey
      - options
      - calculateDataObjects
      type: object
      properties:
        apiKey:
          type: string
        options:
          $ref: '#/components/schemas/CalculationOptions'
        calculateDataObjects:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/CalculateDataObject'
          description: ''
        strict:
          type: boolean
          description: Mits true wordt een strikte validatie gedaan. Bij een strikte validatie worden warnings ook als errors gezien.
          example: false
    ReportRequest:
      title: ReportRequest
      required:
      - apiKey
      - options
      - reportDataObjects
      type: object
      properties:
        apiKey:
          type: string
        options:
          $ref: '#/components/schemas/CalculationOptions'
        reportDataObjects:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/ReportDataObject'
          description: ''
    GenerateAPIKeyRequest:
      title: GenerateAPIKeyRequest
      required:
      - email
      type: object
      properties:
        email:
          type: string
    PriorityProjectUtilisationRequest:
      title: PriorityProjectUtilisationRequest
      required:
      - apiKey
      - projectKey
      type: object
      properties:
        apiKey:
          type: string
        projectKey:
          type: string
    HighestValuePerHexagonRequest:
      title: HighestValuePerHexagonRequest
      required:
      - dataObjects
      type: object
      properties:
        dataObjects:
          minItems: 2
          type: array
          items:
            $ref: '#/components/schemas/DataObject'
          description: ''
    TotalValuePerHexagonRequest:
      title: TotalValuePerHexagonRequest
      required:
      - dataObjects
      type: object
      properties:
        dataObjects:
          minItems: 2
          type: array
          items:
            $ref: '#/components/schemas/DataObject'
          description: ''
    DeltaValuePerHexagonRequest:
      title: DeltaValuePerHexagonRequest
      required:
      - current
      - proposed
      type: object
      properties:
        current:
          $ref: '#/components/schemas/DataObject'
        proposed:
          $ref: '#/components/schemas/DataObject'
        onlyIncreasement:
          type: boolean
          description: Mits true worden delta waarden die onder de 0 komen gezet op 0.
          example: true
    CalculationType:
      title: CalculationType
      enum:
      - NBWET
      - NATURE_AREA
      - CUSTOM_POINTS
      - RADIUS
      type: string
      description: >-
        Type van de berekening. De volgende opties worden ondersteund:

        ___NBWET:___ Rekent voor een Wnb vergunning.

        ___NATURE_AREA:___ Rekent in een straal, als gezet in de optie range, alle receptoren die in die straal in een natuurgebied liggen.

        ___RADIUS:___ Rekent alle receptoren in de straal van de bronnen als gezet in de optie range.

        ___CUSTOM_POINTS:___ Rekent de eigen punten opgegeven in de meegegeven GML. Indien meerdere GML bestanden worden opgegeven worden alle punten uit alle GML bestanden berekend.
      example: NBWET
    PermitCalculationRadiusType:
      title: PermitCalculationRadiusType
      enum:
      - NONE
      - PRIORITY_PROJECT_MAIN_ROADS
      - PRIORITY_PROJECT_MAIN_SHIPPING_LANES
      type: string
      description: >-
        Indien meegegeven wordt dit project als een prioritair project berekend met het bijbehorende rekenbereik.

        Het veld geeft aan of het om een prioritair project hoofdwegennet betreft of een prioritair project hoofdvaarwegennet.

        Deze optie wordt alleen gebruikt bij de rekenoptie __NBWET__.

        De volgende opties worden ondersteund:

        ___NONE:___ Rekenen zonder rekenbereik.

        ___PRIORITY_PROJECT_MAIN_ROADS:___ Prioritair project hoofdwegennet (3 km)

        ___PRIORITY_PROJECT_MAIN_SHIPPING_LANES:___ Prioritair project hoofdvaarwegennet (5 km)
      example: NONE
    PermitReportType:
      title: PermitReportType
      enum:
      - DEMAND
      - DEVELOPMENT_SPACES
      type: string
      description: >-
        Deze optie is alleen bruikbaar mits het om een Wnb bijlage document ( [report](#!/calculation/postReport) ) gaat. Bij een rekenopdracht of niet-Wnb bijlage document heeft dit geen effect. ( ___calculationType == NBWET___ )

        Geeft aan welke type Wnb PDF gegenereerd moet worden. Mits niet meegegeven wordt de optie ___DEVELOPMENT_SPACES___ gekozen.

        Ondersteunende waarden zijn:

        ___DEMAND:___ Bepaling projecteffect. (kan alleen met 1 situatie)

        ___DEVELOPMENT_SPACES:___ Benodigde ontwikkelingsruimte.
      example: DEMAND
tags:
- name: calculation
  description: ''
- name: register
  description: ''
- name: util
  description: ''
- name: user
  description: ''
