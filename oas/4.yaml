openapi: 3.0.0
info:
  title: Open Education API
  description: >
    OpenAPI (fka Swagger) specification for the Open Education API.


    # Hypermedia API

    The Open Education API is designed as a *hypermedia API*. In short, this means all responses will contain hypermedia links

    to simplify the navigation between the different API calls. Each link (except `self`) is optional. When a specific link is

    not provided, this could mean the relation does not exist or the targeted endpoint is not implemented. Each client is responsible

    for checking and handling the links correctly.


    # Error responses

    Error responses are formatted in the `problem+json` media type ([RFC7807](https://tools.ietf.org/html/rfc7807)):


    ```

    {
      "code": 404,
      "title": "Resource not found"
    }

    ```
  contact: {}
  version: '3'
servers:
- url: https://api.openonderwijsapi.nl/v2
  variables: {}
paths:
  /:
    get:
      tags:
      - service metadata
      summary: GET /
      description: Get metadata for the service.
      operationId: Get/
      parameters: []
      responses:
        200:
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GET~1Response'
  /persons:
    get:
      tags:
      - persons
      summary: GET /persons
      description: Get an ordered list of all persons.
      operationId: Get/persons
      parameters:
      - name: order
        in: query
        description: The field to sort on
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/order'
      - name: pageSize
        in: query
        description: The number of items per page
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/pageSize'
      - name: surname
        in: query
        description: Filter by surname
        style: form
        explode: true
        schema:
          type: string
      - name: displayName
        in: query
        description: Filter by displayName
        style: form
        explode: true
        schema:
          type: string
      - name: affiliation
        in: query
        description: Filter by affiliation
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/affiliation'
      - name: educationalDepartment
        in: query
        description: Filter by educational department (educationalDepartmentId)
        style: form
        explode: true
        schema:
          type: string
      - name: educationalPlan
        in: query
        description: Filter by educational plan (educationalPlanId)
        style: form
        explode: true
        schema:
          type: string
      - name: courseGroup
        in: query
        description: Filter by course group (courseGroupId)
        style: form
        explode: true
        schema:
          type: string
      - name: course
        in: query
        description: Filter by course (courseId)
        style: form
        explode: true
        schema:
          type: string
      responses:
        200:
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GET~1personsResponse'
  /persons/{personId}:
    get:
      tags:
      - persons
      summary: GET /persons/{personId}
      description: Get a single person.
      operationId: Get/persons/{personid}
      parameters:
      - name: personId
        in: path
        description: User ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GET~1persons~1{personId}Exception_Error'
  /faculties:
    get:
      tags:
      - faculties
      summary: GET /faculties
      description: Get an ordered list of all faculties.
      operationId: Get/faculties
      parameters:
      - name: order
        in: query
        description: The field to sort on
        style: form
        explode: true
        schema:
          type: string
          default: facultyId_asc
          example: facultyId_asc
      - name: pageSize
        in: query
        description: The number of items per page
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/pageSize'
      responses:
        200:
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GET~1facultiesResponse'
  /faculties/{facultyId}:
    get:
      tags:
      - faculties
      summary: GET /faculties/{facultyId}
      description: Get a single faculty.
      operationId: Get/faculties/{facultyid}
      parameters:
      - name: facultyId
        in: path
        description: Faculty ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item1'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GET~1persons~1{personId}Exception_Error'
  /educational-departments:
    get:
      tags:
      - educational departments
      summary: GET /educational-departments
      description: Get an ordered list of all educational departments.
      operationId: Get /educationalDepartments
      parameters:
      - name: order
        in: query
        description: The field to sort on
        style: form
        explode: true
        schema:
          type: string
          default: educationalPlanId_asc
          example: educationalPlanId_asc
      - name: pageSize
        in: query
        description: The number of items per page
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/pageSize'
      - name: student
        in: query
        description: Filter by student (personId)
        style: form
        explode: true
        schema:
          type: string
      responses:
        200:
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GET~1educational-departmentsResponse'
  /educational-departments/{educationalDepartmentId}:
    get:
      tags:
      - educational departments
      summary: GET /educational-departments/{educationalDepartmentId}
      description: Get a single educational department.
      operationId: Get /educationalDepartments/{educationaldepartmentid}
      parameters:
      - name: educationalDepartmentId
        in: path
        description: educational department ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item2'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GET~1persons~1{personId}Exception_Error'
  /educational-plans:
    get:
      tags:
      - educational plans
      summary: GET /educational-plans
      description: Get an ordered list of all educational plans.
      operationId: Get /educationalPlans
      parameters:
      - name: order
        in: query
        description: The field to sort on
        style: form
        explode: true
        schema:
          type: string
          default: educationalPlanId_asc
          example: educationalPlanId_asc
      - name: pageSize
        in: query
        description: The number of items per page
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/pageSize'
      - name: student
        in: query
        description: Filter by student (personId)
        style: form
        explode: true
        schema:
          type: string
      responses:
        200:
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GET~1educational-plansResponse'
  /educational-plans/{educationalPlanId}:
    get:
      tags:
      - educational plans
      summary: GET /educational-plans/{educationalPlanId}
      description: Get a single educational plan.
      operationId: Get /educationalPlans/{educationalplanid}
      parameters:
      - name: educationalPlanId
        in: path
        description: Educational plan ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item3'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GET~1persons~1{personId}Exception_Error'
  /course-groups:
    get:
      tags:
      - course groups
      summary: GET /course-groups
      description: Get an ordered list of all course groups.
      operationId: Get /courseGroups
      parameters:
      - name: order
        in: query
        description: The field to sort on
        style: form
        explode: true
        schema:
          type: string
          default: courseGroupId_asc
          example: courseGroupId_asc
      - name: pageSize
        in: query
        description: The number of items per page
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 10
          example: 10
      - name: type
        in: query
        description: Filter by type
        style: form
        explode: true
        schema:
          type: string
      - name: student
        in: query
        description: Filter by student (personId)
        style: form
        explode: true
        schema:
          type: string
      - name: faculty
        in: query
        description: Filter by faculty (facultyId)
        style: form
        explode: true
        schema:
          type: string
      - name: educationalDepartment
        in: query
        description: Filter by educational department (educationalDepartmentId)
        style: form
        explode: true
        schema:
          type: string
      - name: educationalPlan
        in: query
        description: Filter by educational plan (educationalPlanId)
        style: form
        explode: true
        schema:
          type: string
      responses:
        200:
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GET~1course-groupsResponse'
  /course-groups/{courseGroupId}:
    get:
      tags:
      - course groups
      summary: GET /course-groups/{courseGroupId}
      description: Get a single course group.
      operationId: Get /courseGroups/{coursegroupid}
      parameters:
      - name: courseGroupId
        in: path
        description: Course Group ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item4'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GET~1persons~1{personId}Exception_Error'
  /courses:
    get:
      tags:
      - courses
      summary: GET /courses
      description: Get a list of all courses, ordered by name (ascending).
      operationId: Get/courses
      parameters:
      - name: pageSize
        in: query
        description: The number of items per page
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/pageSize'
      - name: student
        in: query
        description: Filter by student (personId)
        style: form
        explode: true
        schema:
          type: string
      - name: faculty
        in: query
        description: Filter by faculty (facultyId)
        style: form
        explode: true
        schema:
          type: string
      - name: educationalDepartment
        in: query
        description: Filter by educational department (educationalDepartmentId)
        style: form
        explode: true
        schema:
          type: string
      - name: educationalPlan
        in: query
        description: Filter by educational plan (educationalPlanId)
        style: form
        explode: true
        schema:
          type: string
      - name: courseGroup
        in: query
        description: Filter by course group (courseGroupId)
        style: form
        explode: true
        schema:
          type: string
      responses:
        200:
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GET~1coursesResponse'
  /courses/{courseId}:
    get:
      tags:
      - courses
      summary: GET /courses/{courseId}
      description: Get a single course.
      operationId: Get/courses/{courseid}
      parameters:
      - name: courseId
        in: path
        description: Course ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item5'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GET~1persons~1{personId}Exception_Error'
  /course-results:
    get:
      tags:
      - course results
      summary: GET /course-results
      description: Get a list of all course results, ordered by result date (descending).
      operationId: Get /courseResults
      parameters:
      - name: pageSize
        in: query
        description: The number of items per page
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/pageSize'
      - name: course
        in: query
        description: Filter by the course (courseId)
        style: form
        explode: true
        schema:
          type: string
      - name: student
        in: query
        description: Filter by student (personId)
        style: form
        explode: true
        schema:
          type: string
      - name: academicYear
        in: query
        description: Filter by the academic year this result has been achieved in (e.g. `2017-2018`)
        style: form
        explode: true
        schema:
          pattern: ^\d{4}-\d{4}$
          type: string
      responses:
        200:
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GET~1course-resultsResponse'
        404:
          description: Not Found
  /course-results/{courseResultId}:
    get:
      tags:
      - course results
      summary: GET /course-results/{courseResultId}
      description: Get a single course result.
      operationId: Get /courseResults/{courseresultid}
      parameters:
      - name: courseResultId
        in: path
        description: Course result ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item6'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GET~1persons~1{personId}Exception_Error'
  /test-results:
    get:
      tags:
      - test results
      summary: GET /test-results
      description: Get a list of all test results, ordered by test date (descending).
      operationId: Get /testResults
      parameters:
      - name: pageSize
        in: query
        description: The number of items per page
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/pageSize'
      - name: course
        in: query
        description: Filter by the course (courseId)
        style: form
        explode: true
        schema:
          type: string
      - name: student
        in: query
        description: Filter by student (personId)
        style: form
        explode: true
        schema:
          type: string
      responses:
        200:
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GET~1test-resultsResponse'
        404:
          description: Not Found
  /test-results/{testResultId}:
    get:
      tags:
      - test results
      summary: GET /test-results/{testResultId}
      description: Get a single test result.
      operationId: Get /testResults/{testresultid}
      parameters:
      - name: testResultId
        in: path
        description: Test result ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item7'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GET~1persons~1{personId}Exception_Error'
  /buildings:
    get:
      tags:
      - buildings
      summary: GET /buildings
      description: Get a list of all buildings, ordered by name (ascending).
      operationId: Get/buildings
      parameters:
      - name: pageSize
        in: query
        description: The number of items per page
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/pageSize'
      responses:
        200:
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GET~1buildingsResponse'
  /buildings/{buildingId}:
    get:
      tags:
      - buildings
      summary: GET /buildings/{buildingId}
      description: Get a single building.
      operationId: Get/buildings/{buildingid}
      parameters:
      - name: buildingId
        in: path
        description: Building ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item8'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GET~1persons~1{personId}Exception_Error'
  /rooms:
    get:
      tags:
      - rooms
      summary: GET /rooms
      description: Get a list of all rooms, ordered by name (ascending).
      operationId: Get/rooms
      parameters:
      - name: pageSize
        in: query
        description: The number of items per page
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/pageSize'
      - name: building
        in: query
        description: Filter by building (buildingId)
        style: form
        explode: true
        schema:
          type: string
      - name: type
        in: query
        description: Filter by room type (see service metadata for possible values)
        style: form
        explode: true
        schema:
          type: string
      responses:
        200:
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GET~1roomsResponse'
  /rooms/{roomId}:
    get:
      tags:
      - rooms
      summary: GET /rooms/{roomId}
      description: Get a single room.
      operationId: Get/rooms/{roomid}
      parameters:
      - name: roomId
        in: path
        description: Room ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item9'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GET~1persons~1{personId}Exception_Error'
  /schedules:
    get:
      tags:
      - schedules
      summary: GET /schedules
      description: Get a list of all schedules, ordered by startDateTime (ascending).
      operationId: Get/schedules
      parameters:
      - name: pageSize
        in: query
        description: The number of items per page
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/pageSize'
      - name: room
        in: query
        description: Filter by room (roomId)
        style: form
        explode: true
        schema:
          type: string
      - name: building
        in: query
        description: Filter by building (buildingId)
        style: form
        explode: true
        schema:
          type: string
      - name: course
        in: query
        description: Filter by course (courseId)
        style: form
        explode: true
        schema:
          type: string
      - name: student
        in: query
        description: Filter by student (personId)
        style: form
        explode: true
        schema:
          type: string
      - name: startDateTime
        in: query
        description: Filter by minimum startDateTime, RFC3339 (date-time)
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: endDateTime
        in: query
        description: Filter by maximum endDateTime, RFC3339 (date-time)
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GET~1schedulesResponse'
  /schedules/{scheduleId}:
    get:
      tags:
      - schedules
      summary: GET /schedules/{scheduleId}
      description: Get a single schedule.
      operationId: Get/schedules/{scheduleid}
      parameters:
      - name: scheduleId
        in: path
        description: Schedule ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item10'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GET~1persons~1{personId}Exception_Error'
  /news-feeds:
    get:
      tags:
      - news feeds
      summary: GET /news-feeds
      description: Get a list of all news feeds, ordered by title.
      operationId: Get /newsFeeds
      parameters:
      - name: pageSize
        in: query
        description: The number of items per page
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/pageSize'
      responses:
        200:
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GET~1news-feedsResponse'
  /news-feeds/{newsFeedId}:
    get:
      tags:
      - news feeds
      summary: GET /news-feeds/{newsFeedId}
      description: Get a single news feed.
      operationId: Get /newsFeeds/{newsfeedid}
      parameters:
      - name: newsFeedId
        in: path
        description: News feed ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item11'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GET~1persons~1{personId}Exception_Error'
  /news-items:
    get:
      tags:
      - news items
      summary: GET /news-items
      description: Get an ordered list of all news items.
      operationId: Get /newsItems
      parameters:
      - name: order
        in: query
        description: The field to sort on
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/order1'
      - name: pageSize
        in: query
        description: The number of items per page
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/pageSize'
      - name: newsFeed
        in: query
        description: Filter by news feed (newsFeedId)
        style: form
        explode: true
        schema:
          type: string
      responses:
        200:
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GET~1news-itemsResponse'
  /news-items/{newsItemId}:
    get:
      tags:
      - news items
      summary: GET /news-items/{newsItemId}
      description: Get a single news item.
      operationId: Get /newsItems/{newsitemid}
      parameters:
      - name: newsItemId
        in: path
        description: News item ID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item12'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GET~1persons~1{personId}Exception_Error'
components:
  schemas:
    GET/Response:
      title: GET/Response
      required:
      - owner
      - specification
      - documentation
      - _links
      type: object
      properties:
        owner:
          type: string
          description: Name of the service owner
        logo:
          type: string
          description: URL of the service logo (image dimensions should be 300x300 pixels)
        specification:
          type: string
          description: URL of the API specification (YAML or JSON, compliant with [Open API Specification v2](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md))
        documentation:
          type: string
          description: URL of the API documentation, including general terms and privacy statement
        courseLevels:
          type: array
          items:
            type: string
          description: Set of course levels for the institution
        roomTypes:
          type: array
          items:
            type: string
          description: Set of room types for the institution
        _links:
          $ref: '#/components/schemas/Links'
    Links:
      title: Links
      required:
      - self
      type: object
      properties:
        self:
          $ref: '#/components/schemas/Self'
        endpoints:
          type: array
          items:
            $ref: '#/components/schemas/Endpoint'
          description: Links to the service (collection) endpoints
    Self:
      title: Self
      required:
      - href
      type: object
      properties:
        href:
          type: string
          example: /
      description: Link to current resource
    Endpoint:
      title: Endpoint
      required:
      - href
      type: object
      properties:
        href:
          type: string
      example:
        href: /persons
    order:
      title: order
      enum:
      - surname_asc
      - surname_desc
      - givenName_asc
      - givenName_desc
      type: string
      example: surname_asc
    pageSize:
      title: pageSize
      enum:
      - 10
      - 20
      - 50
      - 100
      - 250
      type: integer
      example: 10
    affiliation:
      title: affiliation
      enum:
      - student
      - employee
      - staff
      - member
      - affiliate
      - organization
      type: string
      example: student
    GET/personsResponse:
      title: GET/personsResponse
      required:
      - pageSize
      - _embedded
      - _links
      type: object
      properties:
        pageSize:
          type: integer
          description: The number of items per page
          format: int32
        _embedded:
          $ref: '#/components/schemas/Embedded'
        _links:
          $ref: '#/components/schemas/Links2'
    Embedded:
      title: Embedded
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
          description: ''
    Item:
      title: Item
      required:
      - personId
      - givenName
      - surname
      - displayName
      - affiliations
      - _links
      type: object
      properties:
        personId:
          type: string
          description: Unique id of this person
        givenName:
          type: string
          description: The first name of this person
        surnamePrefix:
          type: string
          description: The prefix of the family name of this person
        surname:
          type: string
          description: The family name of this person
        displayName:
          type: string
          description: The name of this person which will be displayed
        dateOfBirth:
          type: string
          description: The date of birth of this person, RFC3339 (full-date)
          format: date
        affiliations:
          type: array
          items:
            $ref: '#/components/schemas/affiliation'
          description: The affiliations of how this person is associated with the organization
        mail:
          type: string
          description: The e-mailaddress of this person
        telephoneNumber:
          type: string
          description: The telephone number at the office of this person
        mobileNumber:
          type: string
          description: The mobile number of this person
        photoSocial:
          type: string
          description: The url of the informal picture of this person
        photoOfficial:
          type: string
          description: The url of the official picture of this person
        gender:
          $ref: '#/components/schemas/Gender'
        title:
          type: string
          description: A title to be used for this person
        office:
          type: string
          description: The name of the office where this person is located
        _links:
          $ref: '#/components/schemas/Links1'
    Gender:
      title: Gender
      enum:
      - M
      - F
      - U
      - X
      type: string
      description: The first letter of this person's gender
      example: M
    Links1:
      title: Links1
      required:
      - self
      type: object
      properties:
        self:
          $ref: '#/components/schemas/Self'
        educationalDepartments:
          $ref: '#/components/schemas/EducationalDepartments'
        educationalPlans:
          $ref: '#/components/schemas/EducationalPlans'
        courseGroups:
          $ref: '#/components/schemas/CourseGroups'
        courses:
          $ref: '#/components/schemas/Courses'
        courseResults:
          $ref: '#/components/schemas/CourseResults'
        testResults:
          $ref: '#/components/schemas/TestResults'
        schedules:
          $ref: '#/components/schemas/Schedules'
    EducationalDepartments:
      title: EducationalDepartments
      required:
      - href
      type: object
      properties:
        href:
          type: string
          example: /v2/educational-departments?student=123
      description: Link to the list of educational departments with which this person is affiliated
    EducationalPlans:
      title: EducationalPlans
      required:
      - href
      type: object
      properties:
        href:
          type: string
          example: /v2/educational-plans?student=123
      description: Link to the list of educational plans with which this person is affiliated
    CourseGroups:
      title: CourseGroups
      required:
      - href
      type: object
      properties:
        href:
          type: string
          example: /v2/course-groups?student=123
      description: Link to the list of course groups for this person
    Courses:
      title: Courses
      required:
      - href
      type: object
      properties:
        href:
          type: string
          example: /v2/courses?student=123
      description: Link to the list of courses for this person
    CourseResults:
      title: CourseResults
      required:
      - href
      type: object
      properties:
        href:
          type: string
          example: /v2/course-results?student=123
      description: Link to the list of course results for this person
    TestResults:
      title: TestResults
      required:
      - href
      type: object
      properties:
        href:
          type: string
          example: /v2/test-results?student=123
      description: Link to the list of test results for this person
    Schedules:
      title: Schedules
      required:
      - href
      type: object
      properties:
        href:
          type: string
          example: /v2/schedules?student=123
      description: Link to list of the schedules for this person
    Links2:
      title: Links2
      required:
      - self
      type: object
      properties:
        self:
          $ref: '#/components/schemas/Self2'
        prev:
          $ref: '#/components/schemas/Prev'
        next:
          $ref: '#/components/schemas/Next'
    Self2:
      title: Self2
      required:
      - href
      type: object
      properties:
        href:
          type: string
          description: Link to current page
    Prev:
      title: Prev
      required:
      - href
      type: object
      properties:
        href:
          type: string
          description: Link to previous page
    Next:
      title: Next
      required:
      - href
      type: object
      properties:
        href:
          type: string
          description: Link to next page
    GET/facultiesResponse:
      title: GET/facultiesResponse
      required:
      - pageSize
      - _embedded
      - _links
      type: object
      properties:
        pageSize:
          type: integer
          description: The number of items per page
          format: int32
        _embedded:
          $ref: '#/components/schemas/Embedded1'
        _links:
          $ref: '#/components/schemas/Links2'
    Embedded1:
      title: Embedded1
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item1'
          description: ''
    Item1:
      title: Item1
      required:
      - facultyId
      - type
      - name
      - _links
      type: object
      properties:
        facultyId:
          type: string
          description: Unique id for this faculty
        type:
          type: string
          description: The type of faculty (e.g. institute, faculty, domain)
        name:
          type: string
          description: The name of this faculty
        description:
          type: string
          description: The description of this faculty
        _links:
          $ref: '#/components/schemas/Links3'
    Links3:
      title: Links3
      required:
      - self
      type: object
      properties:
        self:
          $ref: '#/components/schemas/Self'
        parentFaculty:
          $ref: '#/components/schemas/ParentFaculty'
        childFaculties:
          type: array
          items:
            $ref: '#/components/schemas/ChildFaculty'
          description: Link to the child faculaties
        educationalDepartments:
          type: array
          items:
            $ref: '#/components/schemas/EducationalDepartments1'
          description: Links to the educational departments of this faculty
        educationalPlans:
          type: array
          items:
            $ref: '#/components/schemas/EducationalPlans1'
          description: Links to the educational plans of this faculty
        courseGroups:
          $ref: '#/components/schemas/CourseGroups1'
        courses:
          $ref: '#/components/schemas/Courses1'
    ParentFaculty:
      title: ParentFaculty
      required:
      - href
      - title
      type: object
      properties:
        href:
          type: string
          example: /v2/faculties/123
        title:
          type: string
          description: The name of the faculty
      description: Link to the parent faculty
    ChildFaculty:
      title: ChildFaculty
      required:
      - href
      - title
      type: object
      properties:
        href:
          type: string
          example: /v2/faculties/123
        title:
          type: string
          description: The name of the faculty
    EducationalDepartments1:
      title: EducationalDepartments1
      required:
      - href
      - title
      type: object
      properties:
        href:
          type: string
          example: /v2/educational-departments/123
        title:
          type: string
          description: The name of the educational department
    EducationalPlans1:
      title: EducationalPlans1
      required:
      - href
      - title
      type: object
      properties:
        href:
          type: string
          example: /v2/educational-plans/123
        title:
          type: string
          description: The name of the educational plan
    CourseGroups1:
      title: CourseGroups1
      required:
      - href
      type: object
      properties:
        href:
          type: string
          example: /v2/course-groups?faculty=123
      description: Link to the list of course groups of this faculty
    Courses1:
      title: Courses1
      required:
      - href
      type: object
      properties:
        href:
          type: string
          example: /v2/courses?faculty=123
      description: Link to the list of courses for this faculty
    GET/persons/{personId}Exception_Error:
      title: GET/persons/{personId}Exception_Error
      required:
      - status
      - title
      type: object
      properties:
        status:
          type: string
          description: The HTTP status code
          example: 404
        title:
          type: string
          description: A short, human-readable summary of the problem type
          example: Resource not found
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem
    GET/educational-departmentsResponse:
      title: GET/educational-departmentsResponse
      required:
      - pageSize
      - _embedded
      - _links
      type: object
      properties:
        pageSize:
          type: integer
          description: The number of items per page
          format: int32
        _embedded:
          $ref: '#/components/schemas/Embedded2'
        _links:
          $ref: '#/components/schemas/Links2'
    Embedded2:
      title: Embedded2
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item2'
          description: ''
    Item2:
      title: Item2
      required:
      - educationalDepartmentId
      - name
      - _links
      type: object
      properties:
        educationalDepartmentId:
          type: string
          description: Unique id for this educational department
        name:
          type: string
          description: The name of this educational department
        description:
          type: string
          description: The description of this educational department
        _links:
          $ref: '#/components/schemas/Links5'
    Links5:
      title: Links5
      required:
      - self
      type: object
      properties:
        self:
          $ref: '#/components/schemas/Self'
        educationalPlans:
          type: array
          items:
            $ref: '#/components/schemas/EducationalPlans1'
          description: Links to the educational plans for this educational department
        courseGroups:
          $ref: '#/components/schemas/CourseGroups2'
        courses:
          $ref: '#/components/schemas/Courses2'
    CourseGroups2:
      title: CourseGroups2
      required:
      - href
      type: object
      properties:
        href:
          type: string
          example: /v2/course-groups?educationalDepartment=123
      description: Link to list of course groups for this educational department
    Courses2:
      title: Courses2
      required:
      - href
      type: object
      properties:
        href:
          type: string
          example: /v2/courses?educationalDepartment=123
      description: Link to the list of courses for this educational department
    GET/educational-plansResponse:
      title: GET/educational-plansResponse
      required:
      - pageSize
      - _embedded
      - _links
      type: object
      properties:
        pageSize:
          type: integer
          description: The number of items per page
          format: int32
        _embedded:
          $ref: '#/components/schemas/Embedded3'
        _links:
          $ref: '#/components/schemas/Links2'
    Embedded3:
      title: Embedded3
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item3'
          description: ''
    Item3:
      title: Item3
      required:
      - educationalPlanId
      - name
      - termStartDate
      - _links
      type: object
      properties:
        educationalPlanId:
          type: string
          description: Unique id for this educational plan
        name:
          type: string
          description: The name of this educational plan
        description:
          type: string
          description: The description of this educational plan
        termStartDate:
          type: string
          description: The day on which this educational plan starts, RFC3339 (full-date)
          format: date
        termEndDate:
          type: string
          description: The day on which this educational plan ends, RFC3339 (full-date)
          format: date
        ects:
          minimum: 0
          type: integer
          description: The number of EC's that can be archieved in this educational plan
          format: int32
        earnedEcts:
          minimum: 0
          type: integer
          description: The number of EC's that is earned in this education plan
          format: int32
        mainLanguage:
          type: string
          description: The main language in which the courses within this education plan are given, RFC3066
          example: nl-NL
        _links:
          $ref: '#/components/schemas/Links7'
    Links7:
      title: Links7
      required:
      - self
      type: object
      properties:
        self:
          $ref: '#/components/schemas/Self'
        courseGroups:
          $ref: '#/components/schemas/CourseGroups3'
        courses:
          $ref: '#/components/schemas/Courses3'
    CourseGroups3:
      title: CourseGroups3
      required:
      - href
      type: object
      properties:
        href:
          type: string
          example: /v2/course-groups?educationalPlan=123
      description: Link to the list of course groups for this educational plan
    Courses3:
      title: Courses3
      required:
      - href
      type: object
      properties:
        href:
          type: string
          example: /v2/courses?educationalPlan=123
      description: Link to the list of courses for this educational plan
    GET/course-groupsResponse:
      title: GET/course-groupsResponse
      required:
      - pageSize
      - _embedded
      - _links
      type: object
      properties:
        pageSize:
          type: integer
          description: The number of items per page
          format: int32
        _embedded:
          $ref: '#/components/schemas/Embedded4'
        _links:
          $ref: '#/components/schemas/Links2'
    Embedded4:
      title: Embedded4
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item4'
          description: ''
    Item4:
      title: Item4
      required:
      - courseGroupId
      - name
      - type
      - _links
      type: object
      properties:
        courseGroupId:
          type: string
          description: Unique id of this course group
        name:
          type: string
          description: The name of this course group
        studyYear:
          type: string
          description: The year in which this course group was created
        description:
          type: string
          description: The description of this course group
        type:
          type: string
          description: The type of course group (e.g. minor, module, specialization, etc.)
        ects:
          minimum: 0
          type: integer
          description: The number of EC's that can be archieved in this course group
          format: int32
        earnedEcts:
          minimum: 0
          type: integer
          description: The number of EC's that is earned in this course group
          format: int32
        _links:
          $ref: '#/components/schemas/Links9'
    Links9:
      title: Links9
      required:
      - self
      type: object
      properties:
        self:
          $ref: '#/components/schemas/Self'
        courses:
          type: array
          items:
            $ref: '#/components/schemas/Courses4'
          description: Links to the courses affiliated to this course group
    Courses4:
      title: Courses4
      required:
      - href
      - title
      type: object
      properties:
        href:
          type: string
          example: /v2/courses/123
        title:
          type: string
          description: The name of the course
    GET/coursesResponse:
      title: GET/coursesResponse
      required:
      - pageSize
      - _embedded
      - _links
      type: object
      properties:
        pageSize:
          type: integer
          description: The number of items per page
          format: int32
        _embedded:
          $ref: '#/components/schemas/Embedded5'
        _links:
          $ref: '#/components/schemas/Links2'
    Embedded5:
      title: Embedded5
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item5'
          description: ''
    Item5:
      title: Item5
      required:
      - courseId
      - name
      - description
      - mainLanguage
      - _links
      type: object
      properties:
        courseId:
          type: string
          description: Unique id of this course
        name:
          type: string
          description: The name of this course
        abbreviation:
          type: string
          description: The abbreviation used to identify this course
        ects:
          minimum: 0
          type: integer
          description: The number of EC's that is earned when the course is completed successfully
          format: int32
        description:
          type: string
          description: The description of this course
        goals:
          type: string
          description: The description of the main goal of this course
        requirements:
          type: string
          description: The requirements needed to enter this course
        level:
          type: string
          description: The level of this course (see service metadata for possible values)
        format:
          type: string
          description: The format in which this course is given
        mainLanguage:
          type: string
          description: The main language in which this course is given, RFC3066
          example: nl-NL
        enrollment:
          type: string
          description: The extra information that is provided for enrollment
        literature:
          type: string
          description: An overview of the literature that is used in this course
        exams:
          type: string
          description: A description of the way exams for this course are taken
        schedule:
          type: string
          description: A description of the timeframes, when this course takes place
        link:
          type: string
          description: The url containing the address of the website with more information about the course
        _links:
          $ref: '#/components/schemas/Links11'
    Links11:
      title: Links11
      required:
      - self
      type: object
      properties:
        self:
          $ref: '#/components/schemas/Self'
        schedules:
          $ref: '#/components/schemas/Schedules1'
        lecturers:
          type: array
          items:
            $ref: '#/components/schemas/Lecturer'
          description: Links to the lecturers (persons) of this course
        courseResults:
          $ref: '#/components/schemas/CourseResults1'
        testResults:
          $ref: '#/components/schemas/TestResults1'
        faculties:
          type: array
          items:
            $ref: '#/components/schemas/Faculty'
          description: Links to the faculties where this course is given
        educationalDepartments:
          type: array
          items:
            $ref: '#/components/schemas/EducationalDepartments1'
          description: Links to the educational departments where this course is given
        educationalPlans:
          type: array
          items:
            $ref: '#/components/schemas/EducationalPlans1'
          description: Links to the educational plans where this course is part of
        courseGroup:
          type: array
          items:
            $ref: '#/components/schemas/CourseGroup'
          description: Links to the course groups where this course is part of
    Schedules1:
      title: Schedules1
      required:
      - href
      type: object
      properties:
        href:
          type: string
          example: /v2/schedules?course=123
      description: Link to the list of schedules for this course
    Lecturer:
      title: Lecturer
      required:
      - href
      - title
      type: object
      properties:
        href:
          type: string
          example: /v2/persons/123
        title:
          type: string
          description: The display name of the person
    CourseResults1:
      title: CourseResults1
      required:
      - href
      type: object
      properties:
        href:
          type: string
          example: /v2/course-results?course=123
      description: Link to the course results for this course
    TestResults1:
      title: TestResults1
      required:
      - href
      type: object
      properties:
        href:
          type: string
          example: /v2/test-results?course=123
      description: Link to the test results for this course
    Faculty:
      title: Faculty
      required:
      - href
      - title
      type: object
      properties:
        href:
          type: string
          example: /v2/faculties/123
        title:
          type: string
          description: The name of the faculty
    CourseGroup:
      title: CourseGroup
      required:
      - href
      - title
      type: object
      properties:
        href:
          type: string
          example: /v2/courseGroups/123
        title:
          type: string
          description: The name of the course group
    GET/course-resultsResponse:
      title: GET/course-resultsResponse
      required:
      - pageSize
      - _embedded
      - _links
      type: object
      properties:
        pageSize:
          type: integer
          description: The number of items per page
          format: int32
        _embedded:
          $ref: '#/components/schemas/Embedded6'
        _links:
          $ref: '#/components/schemas/Links2'
    Embedded6:
      title: Embedded6
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item6'
          description: ''
    Item6:
      title: Item6
      required:
      - courseResultId
      - passed
      - resultDate
      - academicYear
      - _links
      type: object
      properties:
        courseResultId:
          type: string
          description: Unique id of this course result
        passed:
          type: boolean
          description: Boolean, representing whether the student did or did not pass the course
        grade:
          type: string
          description: The average of the test results
        comment:
          type: string
          description: The comment on the result for the course
        resultDate:
          type: string
          description: The date this result has been published, RFC3339 (full-date)
          format: date
        academicYear:
          pattern: ^\d{4}-\d{4}$
          type: string
          description: The academic year this result has been achieved in (e.g. `2017-2018`)
        _links:
          $ref: '#/components/schemas/Links13'
    Links13:
      title: Links13
      required:
      - self
      type: object
      properties:
        self:
          $ref: '#/components/schemas/Self'
        course:
          $ref: '#/components/schemas/Course'
        student:
          $ref: '#/components/schemas/Student'
        testResults:
          $ref: '#/components/schemas/TestResults2'
    Course:
      title: Course
      required:
      - href
      - title
      type: object
      properties:
        href:
          type: string
          example: /v2/courses/123
        title:
          type: string
          description: The name of the course
      description: Link to the course for this result
    Student:
      title: Student
      required:
      - href
      - title
      type: object
      properties:
        href:
          type: string
          example: /v2/persons/123
        title:
          type: string
          description: The display name of the person
      description: Link to the student (person) for this result
    TestResults2:
      title: TestResults2
      required:
      - href
      type: object
      properties:
        href:
          type: string
          example: /v2/test-results?course=123&student=123
      description: Link to the list of test results of the tests made by the student for this course
    GET/test-resultsResponse:
      title: GET/test-resultsResponse
      required:
      - pageSize
      - _embedded
      - _links
      type: object
      properties:
        pageSize:
          type: integer
          description: The number of items per page
          format: int32
        _embedded:
          $ref: '#/components/schemas/Embedded7'
        _links:
          $ref: '#/components/schemas/Links2'
    Embedded7:
      title: Embedded7
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item7'
          description: ''
    Item7:
      title: Item7
      required:
      - testResultId
      - description
      - testDate
      - grade
      - comment
      - passed
      - _links
      type: object
      properties:
        testResultId:
          type: string
          description: Unique id of this test result
        description:
          type: string
          description: The general description for the test result
        assessmentType:
          type: string
          description: The form of assessment
        testDate:
          type: string
          description: The day on which the test was made, RFC3339 (full-date)
          format: date
        grade:
          type: string
          description: The result for the test, last made
        comment:
          type: string
          description: The comment on the result for this test
        passed:
          type: boolean
          description: Boolean, representing whether the student did or did not pass the test
        weight:
          maximum: 100
          minimum: 0
          type: integer
          description: The weight to 100 as total for this test result in the course result
          format: int32
        _links:
          $ref: '#/components/schemas/Links15'
    Links15:
      title: Links15
      required:
      - self
      type: object
      properties:
        self:
          $ref: '#/components/schemas/Self'
        course:
          $ref: '#/components/schemas/Course1'
        student:
          $ref: '#/components/schemas/Student'
        lecturers:
          type: array
          items:
            $ref: '#/components/schemas/Lecturer'
          description: Links to the lecturers (persons) who are responsible for this test
    Course1:
      title: Course1
      required:
      - href
      - title
      type: object
      properties:
        href:
          type: string
          example: /v2/courses/123
        title:
          type: string
          description: The name of the course
      description: Link to the course for this test result
    GET/buildingsResponse:
      title: GET/buildingsResponse
      required:
      - pageSize
      - _embedded
      - _links
      type: object
      properties:
        pageSize:
          type: integer
          description: The number of items per page
          format: int32
        _embedded:
          $ref: '#/components/schemas/Embedded8'
        _links:
          $ref: '#/components/schemas/Links2'
    Embedded8:
      title: Embedded8
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item8'
          description: ''
    Item8:
      title: Item8
      required:
      - buildingId
      - abbreviation
      - name
      - city
      - _links
      type: object
      properties:
        buildingId:
          type: string
          description: Unique id of this building
        abbreviation:
          type: string
          description: The abbreviation of the name of this building
        name:
          type: string
          description: The name of this building
        description:
          type: string
          description: The description of this building
        address:
          type: string
          description: The streetname and number + appendix of the physical location of this building
        postalCode:
          pattern: ^[1-9][0-9]{3}[A-Z]{2}$
          type: string
          description: The zipcode of the physical location of this building
        city:
          type: string
          description: The city in which this building is located
        lat:
          type: number
          description: The latitude of this building
        lon:
          type: number
          description: The longitude this building
        _links:
          $ref: '#/components/schemas/Links17'
    Links17:
      title: Links17
      required:
      - self
      type: object
      properties:
        self:
          $ref: '#/components/schemas/Self'
        rooms:
          $ref: '#/components/schemas/Rooms'
    Rooms:
      title: Rooms
      required:
      - href
      type: object
      properties:
        href:
          type: string
          example: /v2/rooms?building=123
      description: Link to the list of all rooms in this building
    GET/roomsResponse:
      title: GET/roomsResponse
      required:
      - pageSize
      - _embedded
      - _links
      type: object
      properties:
        pageSize:
          type: integer
          description: The number of items per page
          format: int32
        _embedded:
          $ref: '#/components/schemas/Embedded9'
        _links:
          $ref: '#/components/schemas/Links2'
    Embedded9:
      title: Embedded9
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item9'
          description: ''
    Item9:
      title: Item9
      required:
      - roomId
      - abbreviation
      - name
      - _links
      type: object
      properties:
        roomId:
          type: string
          description: Unique id for this room
        abbreviation:
          type: string
          description: The abbreviation of the name of this room
        name:
          type: string
          description: The name of this room
        type:
          type: string
          description: The type of this room (see service metadata for possible values)
        description:
          type: string
          description: The description of this room
        totalSeats:
          type: integer
          description: The total number of seats located in the room
          format: int32
        totalWorkspaces:
          type: integer
          description: The total number of workspaces located in the room
          format: int32
        availableWorkspaces:
          type: integer
          description: The total number of available (=non-reserved) workspaces in the room
          format: int32
        _links:
          $ref: '#/components/schemas/Links19'
    Links19:
      title: Links19
      required:
      - self
      type: object
      properties:
        self:
          $ref: '#/components/schemas/Self'
        building:
          $ref: '#/components/schemas/Building'
    Building:
      title: Building
      required:
      - href
      - title
      type: object
      properties:
        href:
          type: string
          example: /v2/buildings/123
        title:
          type: string
          description: The name of the building
      description: Link to the building in which the room is located
    GET/schedulesResponse:
      title: GET/schedulesResponse
      required:
      - pageSize
      - _embedded
      - _links
      type: object
      properties:
        pageSize:
          type: integer
          description: The number of items per page
          format: int32
        _embedded:
          $ref: '#/components/schemas/Embedded10'
        _links:
          $ref: '#/components/schemas/Links2'
    Embedded10:
      title: Embedded10
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item10'
          description: ''
    Item10:
      title: Item10
      required:
      - scheduleId
      - startDateTime
      - endDateTime
      - _embedded
      - _links
      type: object
      properties:
        scheduleId:
          type: string
          description: Unique id of this schedule
        startDateTime:
          type: string
          description: The moment on which this schedule starts, RFC3339 (date-time)
          format: date-time
        endDateTime:
          type: string
          description: The moment on which this schedule ends, RFC3339 (date-time)
          format: date-time
        description:
          type: string
          description: The description of this schedule
        _embedded:
          $ref: '#/components/schemas/Embedded11'
        _links:
          $ref: '#/components/schemas/Links22'
    Embedded11:
      title: Embedded11
      required:
      - rooms
      type: object
      properties:
        rooms:
          type: array
          items:
            $ref: '#/components/schemas/Rooms1'
          description: The rooms where this schedule is located
    Rooms1:
      title: Rooms1
      required:
      - roomId
      - abbreviation
      - name
      type: object
      properties:
        roomId:
          type: string
          description: Unique id for this room
        abbreviation:
          type: string
          description: The abbreviation of the name of this room
        name:
          type: string
          description: The name of this room
        _links:
          $ref: '#/components/schemas/Links21'
    Links21:
      title: Links21
      required:
      - self
      type: object
      properties:
        self:
          $ref: '#/components/schemas/Self21'
        building:
          $ref: '#/components/schemas/Building1'
    Self21:
      title: Self21
      required:
      - href
      type: object
      properties:
        href:
          type: string
          example: /v2/rooms/123
      description: Link to the room
    Building1:
      title: Building1
      required:
      - href
      - title
      type: object
      properties:
        href:
          type: string
          example: /v2/buildings/123
        title:
          type: string
          description: The name of the building
      description: Link to the building
    Links22:
      title: Links22
      required:
      - self
      type: object
      properties:
        self:
          $ref: '#/components/schemas/Self'
        courses:
          type: array
          items:
            $ref: '#/components/schemas/Courses4'
          description: Links to the courses affiliated to this schedule
        lecturers:
          type: array
          items:
            $ref: '#/components/schemas/Lecturer2'
          description: Links to the lecturers (persons) of this schedule
    Lecturer2:
      title: Lecturer2
      required:
      - href
      - title
      type: object
      properties:
        href:
          type: string
          example: /v2/persons/123
        title:
          type: string
          description: The name of the person
    GET/news-feedsResponse:
      title: GET/news-feedsResponse
      required:
      - pageSize
      - _embedded
      - _links
      type: object
      properties:
        pageSize:
          type: integer
          description: The number of items per page
          format: int32
        _embedded:
          $ref: '#/components/schemas/Embedded12'
        _links:
          $ref: '#/components/schemas/Links2'
    Embedded12:
      title: Embedded12
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item11'
          description: ''
    Item11:
      title: Item11
      required:
      - newsFeedId
      - title
      - _links
      type: object
      properties:
        newsFeedId:
          type: string
          description: Unique id for this news feed
        title:
          type: string
          description: The title for this news feed
        description:
          type: string
          description: The description of this news feed
        _links:
          $ref: '#/components/schemas/Links24'
    Links24:
      title: Links24
      required:
      - self
      type: object
      properties:
        self:
          $ref: '#/components/schemas/Self'
        newsItems:
          $ref: '#/components/schemas/NewsItems'
    NewsItems:
      title: NewsItems
      required:
      - href
      type: object
      properties:
        href:
          type: string
          example: /v2/news-items?newsFeed=123
      description: Links to the list of news items, that are part of this news feed
    order1:
      title: order1
      enum:
      - publishDate_desc
      - lastModified_desc
      type: string
      example: publishDate_desc
    GET/news-itemsResponse:
      title: GET/news-itemsResponse
      required:
      - pageSize
      - _embedded
      - _links
      type: object
      properties:
        pageSize:
          type: integer
          description: The number of items per page
          format: int32
        _embedded:
          $ref: '#/components/schemas/Embedded13'
        _links:
          $ref: '#/components/schemas/Links2'
    Embedded13:
      title: Embedded13
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item12'
          description: ''
    Item12:
      title: Item12
      required:
      - newsItemId
      - title
      - content
      - lastModified
      - _links
      type: object
      properties:
        newsItemId:
          type: string
          description: Unique id for this news item
        title:
          type: string
          description: The title for this news item
        authors:
          type: array
          items:
            type: string
          description: The authors of the article with this news item
        image:
          type: string
          description: The url containing the address of the image belonging to this news item
        link:
          type: string
          description: The url containing the address of the article belonging to this news item
        content:
          type: string
          description: The content of this news item
        publishDateTime:
          type: string
          description: The moment on which this news item was published, RFC3339 (date-time)
          format: date-time
        lastModified:
          type: string
          description: The moment on which this news item was updated, RFC3339 (date-time)
          format: date-time
        _links:
          $ref: '#/components/schemas/Links26'
    Links26:
      title: Links26
      required:
      - self
      type: object
      properties:
        self:
          $ref: '#/components/schemas/Self'
        newsFeeds:
          type: array
          items:
            $ref: '#/components/schemas/NewsFeed'
          description: Links to the news feeds where this news item is aggregated
    NewsFeed:
      title: NewsFeed
      required:
      - href
      - title
      type: object
      properties:
        href:
          type: string
          example: /v2/news-feeds/123
        title:
          type: string
          description: The name of the news feed
tags:
- name: service metadata
  description: The service API provides metadata for the service.
- name: persons
  description: The persons API provides information about persons related to an educational institute.
- name: faculties
  description: The organizational parts of an organization.
- name: educational departments
  description: The educational departments of an organization.
- name: educational plans
  description: The educational plans API provides information about the plans in which the study is organized
- name: course groups
  description: The course groups API provides informations about the groups which organizes the courses
- name: courses
  description: The courses API provides information about the course. Updated on ad hoc-base.
- name: course results
  description: The course result API provides the (list of) test results from a specific course attended by a student.
- name: test results
  description: The test result API provides information about the results from the tests from different courses done by the student.
- name: buildings
  description: The building API provides general information about buildings in use by the organization.
- name: rooms
  description: The rooms API provides general information about rooms and specific information about the workplaces available. Updated continuously.
- name: schedules
  description: The schedules API provides information about the planning of the courses in lessons. Updated on ad hoc-base.
- name: news feeds
  description: The news feeds API returns news feeds aggregating one or more news items. Updated on ad hoc-base.
- name: news items
  description: The news items API returns news items, used in the news feeds. Updated on ad hoc-base.
